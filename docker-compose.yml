version: '3.9'

networks:
  default:
    external: true
    name: ${DOCKER_NETWORK}
  intnet:
    external: true
    name: ${INT_NETWORK}

services:

#
# === Nginx ===
#
  nginx:
    # Alpine Linux - nginx for prometheus monitoring
    image: nginx:alpine
    container_name: "${APP_HOST}-${APP_ID}-nginx"
    hostname: "nginx.${APP_HOST}.${INT_NETWORK}"
    restart: ${DOCKER_RESTART_POLICY}
    networks:
      - intnet
    ports:
      - "${NGINX_PORT}:80"
    volumes:
      # The first mount add bash and ping to nginx:alpine:
      - ./conf/nginx/add.sh:/docker-entrypoint.d/05-add-packages.sh:ro
      - ./application/html:/var/www/html
      - ./conf/nginx/default-http.conf:/etc/nginx/conf.d/default.conf:ro
      - ./logs/nginx:/var/log/nginx
    healthcheck:
      test: "curl -s -I http://nginx.${APP_HOST}.${INT_NETWORK}:80/favicon.ico | grep -q 'HTTP/1.1 200'"
      interval: 20s
      timeout: 5s
      retries: 50

#
# === Nginx Prometheus Exporter ===
#
  nginx-exporter:
    depends_on:
      nginx:
        condition: service_healthy
    # https://stackoverflow.com/questions/64952485/nginx-prometheus-exporter-container-cannot-connect-to-nginx
    image: nginx/nginx-prometheus-exporter
    container_name: "${APP_HOST}-${APP_ID}-nginx-exporter"
    hostname: "nginx-exporter.${APP_HOST}.${INT_NETWORK}"
    restart: ${DOCKER_RESTART_POLICY}
    networks:
      - intnet
    ports:
      - "${NGINX_EXPORTER_PORT}:9113"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command:
      - -nginx.scrape-uri=http://host.docker.internal:${NGINX_PORT}/stub_status
      - -web.telemetry-path=/metrics

#
# === Apache httpd ===
#
  httpd:
    image: httpd:2.4-alpine
    container_name: "${APP_HOST}-${APP_ID}-httpd"
    hostname: "httpd.${APP_HOST}.${INT_NETWORK}"
    restart: ${DOCKER_RESTART_POLICY}
    networks:
      - intnet
    ports:
      - "${HTTPD_PORT}:80"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./conf/httpd:/usr/local/apache2/conf:ro
      - ./logs/httpd:/var/log/httpd

#
# === Apache httpd Prometheus Exporter ===
#
  httpd-exporter:
    image: lusotycoon/apache-exporter
    container_name: "${APP_HOST}-${APP_ID}-httpd-exporter"
    hostname: "httpd-exporter.${APP_HOST}.${INT_NETWORK}"
    restart: ${DOCKER_RESTART_POLICY}
    networks:
      - intnet
    ports:
      - "${HTTPD_EXPORTER_PORT}:9117"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    entrypoint: /bin/apache_exporter --scrape_uri=http://host.docker.internal:${HTTPD_PORT}/server-status

#         
# === Tomcat ===
#         
  tomcat:
    image: tomcat:9
    container_name: "${APP_HOST}-${APP_ID}-tomcat"
    hostname: "tomcat.${APP_HOST}.${INT_NETWORK}"
    restart: ${DOCKER_RESTART_POLICY}
    networks:
      - intnet
    ports:
      - "${TOMCAT_PORT}:${TOMCAT_PORT}"
    environment:
      - TOMCAT_PORT="${TOMCAT_PORT}"
      - JOLOKIA_USERNAME="${JOLOKIA_USERNAME}"
      - JOLOKIA_PASSWORD="${JOLOKIA_PASSWORD}"
    volumes:
      - ./conf/tomcat/webapps/jolokia:/usr/local/tomcat/webapps/jolokia
      - ./conf/tomcat/server.xml:/usr/local/tomcat/conf/server.xml:ro
      - ./conf/tomcat/web.xml:/usr/local/tomcat/conf/web.xml:ro
      - ./conf/tomcat/tomcat-users.xml:/usr/local/tomcat/conf/tomcat-users.xml:ro
      - ./conf/tomcat/catalina.sh:/usr/local/tomcat/bin/catalina.sh:ro
      - ./logs/tomcat:/usr/local/tomcat/logs
    # healthcheck:
    #   test: "curl -s -I http://localhost:${TOMCAT_PORT} | grep -q 'HTTP/1.1 404'"
    #   interval: 20s
    #   timeout: 5s
    #   retries: 50

#         
# === Tomcat Prometheus Exporter ===
# https://github.com/aklinkert/jolokia_exporter
#         
  tomcat-exporter:
    image: scalify/jolokia_exporter
    container_name: "${APP_HOST}-${APP_ID}-tomcat-exporter"
    hostname: "tomcat-exporter.${APP_HOST}.${INT_NETWORK}"
    restart: ${DOCKER_RESTART_POLICY}
    networks:
      - intnet
    ports:
      - "${TOMCAT_EXPORTER_PORT}:9422"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./conf/fixtures:/fixtures
    command: [
      "export", "/fixtures/config.yml", "http://host.docker.internal:${TOMCAT_PORT}/jolokia",
      "--basic-auth-user", "${JOLOKIA_USERNAME}",
      "--basic-auth-password", "${JOLOKIA_PASSWORD}",
      "--insecure"
    ]

#
# === PostgreSQL ===
#
  postgres:
    image: postgres:14-alpine
    container_name: "${APP_HOST}-${APP_ID}-postgres"
    hostname: "postgres.${APP_HOST}.${INT_NETWORK}"
    restart: ${DOCKER_RESTART_POLICY}
    environment:
      - POSTGRES_USERNAME=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - ${POSTGRES_PORT}:5432
    networks:
      - intnet
    volumes:
      - ./data/postgres:/var/lib/postgresql/data

#
# === PostgreSQL Prometheus Exporter ===
# https://github.com/prometheus-community/postgres_exporter
#
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: "${APP_HOST}-${APP_ID}-postgres-exporter"
    hostname: "postgres-exporter.${APP_HOST}.${INT_NETWORK}"
    restart: ${DOCKER_RESTART_POLICY}
    networks:
      - intnet
    ports:
      - "${POSTGRES_EXPORTER_PORT}:9187"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USERNAME}:${POSTGRES_PASSWORD}@host.docker.internal:${POSTGRES_PORT}/postgres?sslmode=disable

#
# === WildFly ===
#        
  wildfly:
    image: docker.io/bitnami/wildfly:27
    container_name: "${APP_HOST}-${APP_ID}-wildfly"
    hostname: "wildfly.${APP_HOST}.${INT_NETWORK}"
    restart: ${DOCKER_RESTART_POLICY}
    networks:
      - intnet
    ports:
      - "${WILDFLY_PORT}:${WILDFLY_PORT}"
      - "${WILDFLY_CONSOLE_PORT}:9990"
    volumes:
      - ./data/wildfly:/bitnami/wildfly
    environment:
      - WILDFLY_PASSWORD=${WILDFLY_PASSWORD}
      - WILDFLY_USERNAME=${WILDFLY_USERNAME}
      - WILDFLY_MANAGEMENT_LISTEN_ADDRESS=${WILDFLY_MANAGEMENT_LISTEN_ADDRESS}

#
# === Prometheus ===
#
  prometheus:
    image: docker.io/bitnami/prometheus:${PROMETHEUS_VERSION}
    container_name: "${APP_HOST}-${APP_ID}-prometheus"
    hostname: "${APP_HOST}.${INT_NETWORK}"
    restart: ${DOCKER_RESTART_POLICY}
    networks:
      - intnet
    ports:
      - "${MONITOR_PORT}:9090"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./conf/prometheus/prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml
      - ./data/prometheus:/opt/bitnami/prometheus/data:rw

#
# === Grafana ===
#
  grafana:
    image: docker.io/bitnami/grafana:${GRAFANA_VERSION}
    container_name: "${APP_HOST}-${APP_ID}-grafana"
    hostname: "grafana.${APP_HOST}.${INT_NETWORK}"
    restart: ${DOCKER_RESTART_POLICY}
    networks:
      - intnet
    ports:
      - "${GRAFANA_PORT}:3000"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - GRAFANA_PORT="${GRAFANA_PORT}"
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    volumes:
      - ./conf/grafana/grafana.ini:/opt/bitnami/grafana/conf/grafana.ini
      - ./conf/grafana/default.ini:/opt/bitnami/grafana/conf/defaults.ini
      - ./data/grafana:/opt/bitnami/grafana/data:rw
